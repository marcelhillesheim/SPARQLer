{
  parserClass="language.parser.SparqlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sparql"
  psiImplClassSuffix="Impl"
  psiPackage="language.psi"
  psiImplPackage="language.psi.impl"

  elementTypeHolderClass="language.psi.SparqlTypes"
  elementTypeClass="language.psi.SparqlElementType"
  tokenTypeClass="language.psi.SparqlTokenType"

  tokens = [
    LINE_COMMENT = "regexp:#.*"
  ]


}

//TODO test pins (highlighting)
// pin explanation https://stackoverflow.com/questions/48701510/pin-recoverwhile-in-a-bnf-parsing

// added new root element to the bnf grammar. Otherwise the updateunit is unreachable.
Root    ::= QueryUnit | UpdateUnit

QueryUnit	  ::=  	Query
Query	  ::=  	Prologue
( SelectQuery | ConstructQuery | DescribeQuery | AskQuery )
ValuesClause
UpdateUnit	  ::=  	Update
Prologue	  ::=  	( BaseDecl | PrefixDecl )*
BaseDecl	  ::=  	KW_BASE IRIREF
PrefixDecl	  ::=  	KW_PREFIX PNAME_NS IRIREF
SelectQuery	  ::=  	SelectClause DatasetClause* WhereClause SolutionModifier
SubSelect	  ::=  	SelectClause WhereClause SolutionModifier ValuesClause
SelectClause	  ::=  	KW_SELECT ( KW_DISTINCT | KW_REDUCED )? ( ( Var | ( OP_LROUND Expression KW_AS Var OP_RROUND ) )+ | OP_MULT )
ConstructQuery	  ::=  	KW_CONSTRUCT ( ConstructTemplate DatasetClause* WhereClause SolutionModifier | DatasetClause* KW_WHERE OP_LCURLY TriplesTemplate? OP_RCURLY SolutionModifier )
DescribeQuery	  ::=  	KW_DESCRIBE ( VarOrIri+ | OP_MULT ) DatasetClause* WhereClause? SolutionModifier
AskQuery	  ::=  	KW_ASK DatasetClause* WhereClause SolutionModifier
DatasetClause	  ::=  	KW_FROM ( DefaultGraphClause | NamedGraphClause )
DefaultGraphClause	  ::=  	SourceSelector
NamedGraphClause	  ::=  	KW_NAMED SourceSelector
SourceSelector	  ::=  	iri
WhereClause	  ::=  	KW_WHERE? GroupGraphPattern
SolutionModifier	  ::=  	GroupClause? HavingClause? OrderClause? LimitOffsetClauses?
GroupClause	  ::=  	KW_GROUP KW_BY GroupCondition+
GroupCondition	  ::=  	BuiltInCall | FunctionCall | OP_LROUND Expression ( KW_AS Var )? OP_RROUND | Var
HavingClause	  ::=  	KW_HAVING HavingCondition+
HavingCondition	  ::=  	Constraint
OrderClause	  ::=  	KW_ORDER KW_BY OrderCondition+
OrderCondition	  ::=  	( ( KW_ASC | KW_DESC ) BrackettedExpression )
| ( Constraint | Var )
LimitOffsetClauses	  ::=  	LimitClause OffsetClause? | OffsetClause LimitClause?
LimitClause	  ::=  	KW_LIMIT INTEGER
OffsetClause	  ::=  	KW_OFFSET INTEGER
ValuesClause	  ::=  	( KW_VALUES DataBlock )?
//TODO pin rest of file
Update	  ::=  	Prologue ( Update1 ( OP_SEMI Update )? )?
Update1	  ::=  	Load | Clear | Drop | Add | Move | Copy | Create | InsertData | DeleteData | DeleteWhere | Modify
Load	  ::=  	KW_LOAD KW_SILENT? iri ( KW_INTO GraphRef )?
Clear	  ::=  	KW_CLEAR KW_SILENT? GraphRefAll
Drop	  ::=  	KW_DROP KW_SILENT? GraphRefAll
Create	  ::=  	KW_CREATE KW_SILENT? GraphRef
Add	  ::=  	KW_ADD KW_SILENT? GraphOrDefault KW_TO GraphOrDefault
Move	  ::=  	KW_MOVE KW_SILENT? GraphOrDefault KW_TO GraphOrDefault
Copy	  ::=  	KW_COPY KW_SILENT? GraphOrDefault KW_TO GraphOrDefault
InsertData	  ::=  	KW_INSERT KW_DATA QuadData
DeleteData	  ::=  	KW_DELETE KW_DATA QuadData
DeleteWhere	  ::=  	KW_DELETE KW_WHERE QuadPattern
Modify	  ::=  	( KW_WITH iri )? ( DeleteClause InsertClause? | InsertClause ) UsingClause* KW_WHERE GroupGraphPattern
DeleteClause	  ::=  	KW_DELETE QuadPattern
InsertClause	  ::=  	KW_INSERT QuadPattern
UsingClause	  ::=  	KW_USING ( iri | KW_NAMED iri )
GraphOrDefault	  ::=  	KW_DEFAULT | KW_GRAPH? iri
GraphRef	  ::=  	KW_GRAPH iri
GraphRefAll	  ::=  	GraphRef | KW_DEFAULT | KW_NAMED | KW_ALL
QuadPattern	  ::=  	OP_LCURLY Quads OP_RCURLY
QuadData	  ::=  	OP_LCURLY Quads OP_RCURLY
Quads	  ::=  	TriplesTemplate? ( QuadsNotTriples OP_DOT? TriplesTemplate? )*
QuadsNotTriples	  ::=  	KW_GRAPH VarOrIri OP_LCURLY TriplesTemplate? OP_RCURLY
TriplesTemplate	  ::=  	TriplesSameSubject ( OP_DOT TriplesTemplate? )?
GroupGraphPattern	  ::=  	OP_LCURLY ( SubSelect | GroupGraphPatternSub ) OP_RCURLY
GroupGraphPatternSub	  ::=  	TriplesBlock? ( GraphPatternNotTriples OP_DOT? TriplesBlock? )*
//Todo recover
TriplesBlock	  ::=  	TriplesSameSubjectPath ( OP_DOT TriplesBlock? )?
GraphPatternNotTriples	  ::=  	GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind | InlineData
OptionalGraphPattern	  ::=  	KW_OPTIONAL GroupGraphPattern
GraphGraphPattern	  ::=  	KW_GRAPH VarOrIri GroupGraphPattern
ServiceGraphPattern	  ::=  	KW_SERVICE KW_SILENT? VarOrIri GroupGraphPattern
Bind	  ::=  	KW_BIND OP_LROUND Expression KW_AS Var OP_RROUND
InlineData	  ::=  	KW_VALUES DataBlock
DataBlock	  ::=  	InlineDataOneVar | InlineDataFull
InlineDataOneVar	  ::=  	Var OP_LCURLY DataBlockValue* OP_RCURLY
InlineDataFull	  ::=  	( NIL | OP_LROUND Var* OP_RROUND ) OP_LCURLY ( OP_LROUND DataBlockValue* OP_RROUND | NIL )* OP_RCURLY
DataBlockValue	  ::=  	iri | RDFLiteral | NumericLiteral | BooleanLiteral | KW_UNDEF
MinusGraphPattern	  ::=  	KW_MINUS GroupGraphPattern
GroupOrUnionGraphPattern	  ::=  	GroupGraphPattern ( KW_UNION GroupGraphPattern )*
Filter	  ::=  	KW_FILTER Constraint
Constraint	  ::=  	BrackettedExpression | BuiltInCall | FunctionCall
FunctionCall	  ::=  	iri ArgList
ArgList	  ::=  	NIL | OP_LROUND KW_DISTINCT? Expression ( OP_COMMA Expression )* OP_RROUND
ExpressionList	  ::=  	NIL | OP_LROUND Expression ( OP_COMMA Expression )* OP_RROUND
ConstructTemplate	  ::=  	OP_LCURLY ConstructTriples? OP_RCURLY
ConstructTriples	  ::=  	TriplesSameSubject ( OP_DOT ConstructTriples? )?
//TODO recover for quad
TriplesSameSubject	  ::=  	VarOrTerm PropertyListNotEmpty | TriplesNode PropertyList
PropertyList	  ::=  	PropertyListNotEmpty?
//TODO recover after new line ("." ";")
PropertyListNotEmpty	  ::=  	Verb ObjectList ( OP_SEMI ( Verb ObjectList )? )*
Verb	  ::=  	VarOrIri | KW_A
ObjectList	  ::=  	Object ( OP_COMMA Object )*
Object	  ::=  	GraphNode
//TODO recover
TriplesSameSubjectPath	  ::=  	VarOrTerm PropertyListPathNotEmpty | TriplesNodePath PropertyListPath
PropertyListPath	  ::=  	PropertyListPathNotEmpty?

//TODO recover after new line ("." ";")
PropertyListPathNotEmpty	  ::=  	( VerbPath | VerbSimple ) ObjectListPath ( OP_SEMI ( ( VerbPath | VerbSimple ) ObjectListPath )? )*

VerbPath	  ::=  	Path
VerbSimple	  ::=  	Var
ObjectListPath	  ::=  	ObjectPath ( OP_COMMA ObjectPath )*
ObjectPath	  ::=  	GraphNodePath
Path	  ::=  	PathAlternative
PathAlternative	  ::=  	PathSequence ( OP_PIPE PathSequence )*
PathSequence	  ::=  	PathEltOrInverse ( OP_DIV PathEltOrInverse )*
PathElt	  ::=  	PathPrimary PathMod?
PathEltOrInverse	  ::=  	PathElt | OP_HAT PathElt
PathMod	  ::=  	OP_QUESTION_MARK | OP_MULT | OP_PLUS
PathPrimary	  ::=  	iri | KW_A | OP_NOT PathNegatedPropertySet | OP_LROUND Path OP_RROUND
PathNegatedPropertySet	  ::=  	PathOneInPropertySet | OP_LROUND ( PathOneInPropertySet ( OP_PIPE PathOneInPropertySet )* )? OP_RROUND
PathOneInPropertySet	  ::=  	iri | KW_A | OP_HAT ( iri | KW_A )
//TODO name conflict --> added Lit_ --> could lead to conflicts if grammar gets updated
Lit_Integer	  ::=  	INTEGER
TriplesNode	  ::=  	Collection | BlankNodePropertyList
BlankNodePropertyList	  ::=  	OP_LSQUARE PropertyListNotEmpty OP_RSQUARE
TriplesNodePath	  ::=  	CollectionPath | BlankNodePropertyListPath
BlankNodePropertyListPath	  ::=  	OP_LSQUARE PropertyListPathNotEmpty OP_RSQUARE
Collection	  ::=  	OP_LROUND GraphNode+ OP_RROUND
CollectionPath	  ::=  	OP_LROUND GraphNodePath+ OP_RROUND
GraphNode	  ::=  	VarOrTerm | TriplesNode
GraphNodePath	  ::=  	VarOrTerm | TriplesNodePath
VarOrTerm	  ::=  	Var | GraphTerm
VarOrIri	  ::=  	Var | iri
Var	  ::=  	VAR1 | VAR2
GraphTerm	  ::=  	iri | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NIL
Expression	  ::=  	ConditionalOrExpression
ConditionalOrExpression	  ::=  	ConditionalAndExpression ( OP_PIPEPIPE ConditionalAndExpression )*
ConditionalAndExpression	  ::=  	ValueLogical ( OP_ANDAND ValueLogical )*
ValueLogical	  ::=  	RelationalExpression
RelationalExpression	  ::=  	NumericExpression ( OP_EQ NumericExpression | OP_NE NumericExpression | OP_LT NumericExpression | OP_GT NumericExpression | OP_LE NumericExpression | OP_GE NumericExpression | KW_IN ExpressionList | KW_NOT KW_IN ExpressionList )?
NumericExpression	  ::=  	AdditiveExpression
AdditiveExpression	  ::=  	MultiplicativeExpression ( OP_PLUS MultiplicativeExpression | OP_MINUS MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( OP_MULT UnaryExpression ) | ( OP_DIV UnaryExpression ) )* )*
MultiplicativeExpression	  ::=  	UnaryExpression ( OP_MULT UnaryExpression | OP_DIV UnaryExpression )*
UnaryExpression	  ::=  	  OP_NOT PrimaryExpression
| OP_PLUS PrimaryExpression
| OP_MINUS PrimaryExpression
| PrimaryExpression
PrimaryExpression	  ::=  	BrackettedExpression | BuiltInCall | iriOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression	  ::=  	OP_LROUND Expression OP_RROUND
BuiltInCall	  ::=  	  Aggregate
| KW_STR OP_LROUND Expression OP_RROUND
| KW_LANG OP_LROUND Expression OP_RROUND
| KW_LANGMATCHES OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_DATATYPE OP_LROUND Expression OP_RROUND
| KW_BOUND OP_LROUND Var OP_RROUND
| KW_IRI OP_LROUND Expression OP_RROUND
| KW_URI OP_LROUND Expression OP_RROUND
| KW_BNODE ( OP_LROUND Expression OP_RROUND | NIL )
| KW_RAND NIL
| KW_ABS OP_LROUND Expression OP_RROUND
| KW_CEIL OP_LROUND Expression OP_RROUND
| KW_FLOOR OP_LROUND Expression OP_RROUND
| KW_ROUND OP_LROUND Expression OP_RROUND
| KW_CONCAT ExpressionList
| SubstringExpression
| KW_STRLEN OP_LROUND Expression OP_RROUND
| StrReplaceExpression
| KW_UCASE OP_LROUND Expression OP_RROUND
| KW_LCASE OP_LROUND Expression OP_RROUND
| KW_ENCODE_FOR_URI OP_LROUND Expression OP_RROUND
| KW_CONTAINS OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_STRSTARTS OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_STRENDS OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_STRBEFORE OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_STRAFTER OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_YEAR OP_LROUND Expression OP_RROUND
| KW_MONTH OP_LROUND Expression OP_RROUND
| KW_DAY OP_LROUND Expression OP_RROUND
| KW_HOURS OP_LROUND Expression OP_RROUND
| KW_MINUTES OP_LROUND Expression OP_RROUND
| KW_SECONDS OP_LROUND Expression OP_RROUND
| KW_TIMEZONE OP_LROUND Expression OP_RROUND
| KW_TZ OP_LROUND Expression OP_RROUND
| KW_NOW NIL
| KW_UUID NIL
| KW_STRUUID NIL
| KW_MD5 OP_LROUND Expression OP_RROUND
| KW_SHA1 OP_LROUND Expression OP_RROUND
| KW_SHA256 OP_LROUND Expression OP_RROUND
| KW_SHA384 OP_LROUND Expression OP_RROUND
| KW_SHA512 OP_LROUND Expression OP_RROUND
| KW_COALESCE ExpressionList
| KW_IF OP_LROUND Expression OP_COMMA Expression OP_COMMA Expression OP_RROUND
| KW_STRLANG OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_STRDT OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_SAME_TERM OP_LROUND Expression OP_COMMA Expression OP_RROUND
| KW_IS_IRI OP_LROUND Expression OP_RROUND
| KW_IS_URI OP_LROUND Expression OP_RROUND
| KW_IS_BLANK OP_LROUND Expression OP_RROUND
| KW_IS_LITERAL OP_LROUND Expression OP_RROUND
| KW_IS_NUMERIC OP_LROUND Expression OP_RROUND
| RegexExpression
| ExistsFunc
| NotExistsFunc
RegexExpression	  ::=  	KW_REGEX OP_LROUND Expression OP_COMMA Expression ( OP_COMMA Expression )? OP_RROUND
SubstringExpression	  ::=  	KW_SUBSTR OP_LROUND Expression OP_COMMA Expression ( OP_COMMA Expression )? OP_RROUND
StrReplaceExpression	  ::=  	KW_REPLACE OP_LROUND Expression OP_COMMA Expression OP_COMMA Expression ( OP_COMMA Expression )? OP_RROUND
ExistsFunc	  ::=  	KW_EXISTS GroupGraphPattern
NotExistsFunc	  ::=  	KW_NOT KW_EXISTS GroupGraphPattern
Aggregate	  ::=  	  KW_COUNT OP_LROUND KW_DISTINCT? ( OP_MULT | Expression ) OP_RROUND
| KW_SUM OP_LROUND KW_DISTINCT? Expression OP_RROUND
| KW_MIN OP_LROUND KW_DISTINCT? Expression OP_RROUND
| KW_MAX OP_LROUND KW_DISTINCT? Expression OP_RROUND
| KW_AVG OP_LROUND KW_DISTINCT? Expression OP_RROUND
| KW_SAMPLE OP_LROUND KW_DISTINCT? Expression OP_RROUND
| KW_GROUP_CONCAT OP_LROUND KW_DISTINCT? Expression ( OP_SEMI KW_SEPARATOR OP_EQ String )? OP_RROUND
iriOrFunction	  ::=  	iri ArgList?
RDFLiteral	  ::=  	String ( LANGTAG | ( OP_HATHAT iri ) )?
NumericLiteral	  ::=  	NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned	  ::=  	INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive	  ::=  	INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
NumericLiteralNegative	  ::=  	INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
BooleanLiteral	  ::=  	LIT_TRUE | LIT_FALSE
String	  ::=  	STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
iri	  ::=  	IRIREF | PrefixedName
PrefixedName	  ::=  	PNAME_LN | PNAME_NS
BlankNode	  ::=  	BLANK_NODE_LABEL | ANON